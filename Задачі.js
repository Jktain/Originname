// 1) Скопирован ли массив?
// Что выведет следующий код?

// let fruits = ["Яблоки", "Груша", "Апельсин"];

// добавляем новое значение в "копию"
// let shoppingCart = fruits;
// shoppingCart.push("Банан");

// что в fruits?
// alert( fruits.length ); // ?

// Ответ: Выведется 4, потому, что массивы – это объекты. Обе переменные shoppingCart
//      и fruits являются ссылками на один и тот же массив.

//------------------------------------------- 2 -------------------------------------------
// Давайте произведём 5 операций с массивом:
// 1) Создайте массив styles с элементами «Джаз» и «Блюз».
// 2) Добавьте «Рок-н-ролл» в конец.
// 3) Замените значение в середине на «Классика». Ваш код для поиска значения в середине
//     должен работать для массивов с любой длиной.
// 4) Удалите первый элемент массива и покажите его.
// 5) Вставьте Рэп и Регги в начало массива.

// Ответ: 
// let styles = ["Джаз", "Блюз"];
// styles.push("Рок-н-ролл");
// styles[Math.floor((styles.length - 1) / 2)] = "Классика";
// alert( styles.shift() );
// styles.unshift("Рэп", "Регги");

//------------------------------------------- 3 -------------------------------------------
// Каков результат? Почему?

// let arr = ["a", "b"];

// arr.push(function() {
//   alert( this );
// });

// arr[2](); // ?

// Ответ:
// Вызов arr[2]() синтаксически – старый добрый obj[method](), в роли obj – arr, 
//     а в роли method – 2.

// Итак, у нас есть вызов функции arr[2] как метода объекта. Соответственно, он получает
//     в качестве this объект arr и выводит массив:

// let arr = ["a", "b"];

// arr.push(function() {
//   alert( this );
// })

// arr[2](); // a,b,function(){...}
// У массива в итоге 3 элемента: сначала их было 2, плюс функция.

//------------------------------------------- 4 -------------------------------------------
// Напишите функцию sumInput(), которая:

// 1) Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
// 2) Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, 
//     пустую строку или нажмёт «Отмена».
// 3) Подсчитывает и возвращает сумму элементов массива.

// P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».

// Ответ:
// Обратите внимание на малозаметную, но важную деталь решения. Мы не преобразуем value
//     в число сразу после prompt, потому что после value = +value мы не сможем отличить
//     пустую строку (конец записи) от «0» (разрешённое число). Мы сделаем это позже.

// function sumInput() {

//   let numbers = [];

//   while (true) {

//     let value = prompt("Введите число", 0);

//     // Прекращаем ввод?
//     if (value === "" || value === null || !isFinite(value)) break;

//     numbers.push(+value);
//   }

//   let sum = 0;
//   for (let number of numbers) {
//     sum += number;
//   }
//   return sum;
// }

// alert( sumInput() );

//------------------------------------------- 5 -------------------------------------------


// Ответ: 


//------------------------------------------- 6 -------------------------------------------


// Ответ:

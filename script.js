// let func = (arg1, arg2, ...argN) => expression;
// Это создаёт функцию func, которая принимает аргументы arg1..argN,
//     затем вычисляет expression в правой части с их использованием
//     и возвращает результат.
//     Другими словами, это сокращённая версия:

// let func = function(arg1, arg2, ...argN) {
//   return expression;
// };
// Если у нас только один аргумент, то круглые скобки вокруг параметров
//     можно опустить, сделав запись ещё короче:
// let double = n => n * 2;
// примерно тоже что и: let double = function(n) { return n * 2 }
// alert( double(3) ); // 6
// Если аргументов нет, круглые скобки будут пустыми, но они должны
//     присутствовать:

// let sayHi = () => alert("Hello!");

// sayHi();
// Стрелочные функции можно использовать так же, как и Function
// Expression. Например, для динамического создания функции:

// let age = prompt("Сколько Вам лет?", 18);
// let welcome = (age < 18) ?
//   () => alert('Привет!') :
//   () => alert("Здравствуйте!");
// welcome();

// Иногда нам нужна более сложная функция, с несколькими выражениями
//     и инструкциями. Это также возможно, нужно лишь заключить их в
//     фигурные скобки. При этом важное отличие – в том, что в таких
//     скобках для возврата значения нужно использовать return (как в
//     обычных функциях).
// let sum = (a, b) => {  
//     let result = a + b;
//     return result; // если мы используем фигурные скобки,
//   };               //          то нам нужно явно указать "return"
  
//   alert( sum(1, 2) ); // 3
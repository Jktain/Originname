// Отладка – это процесс поиска и исправления ошибок в скрипте. Все
//     современные браузеры и большинство других сред разработки 
//     поддерживают инструменты для отладки – специальный графический
//     интерфейс, который сильно упрощает отладку. Он также позволяет
//     по шагам отследить, что именно происходит в нашем коде.
// Мы будем использовать браузер Chrome, так как у него достаточно
//     возможностей, в большинстве других браузеров процесс будет схожим

//------------------ Панель «Исходный код» («Sources») -----------------
// Версия Chrome, установленная у вас, может выглядеть немного иначе,
// однако принципиальных отличий не будет.
//     1) Работая в Chrome, откройте тестовую страницу.
//     2) Включите инструменты разработчика, нажав F12 (Mac: Cmd+Opt+I).
//     3) Щёлкните по панели Sources («исходный код»).
// Кнопка-переключатель  откроет вкладку со списком файлов.
// Кликните на неё и выберите hello.js в дереве файлов.
//     1) В зоне File Navigator (панель для навигации файлов) показаны
//     файлы HTML, JavaScript, CSS, включая изображения, используемые 
//     на странице. Здесь также могут быть файлы различных расширений
//     Chrome.
//     2) Зона Code Editor (редактор кода) показывает исходный код.
//     3) 3она JavaScript Debugging (панель отладки JavaScript) отведена
//     для отладки, скоро мы к ней вернёмся.

//------------------------------- Консоль ------------------------------
// При нажатии на клавишу Esc в нижней части экрана вызывается консоль,
//     где можно вводить команды и выполнять их клавишей Enter. 
//     Результат выполнения инструкций сразу же отображается в консоли.
// Например, результатом 1+2 будет 3, а вызов функции hello("debugger")
//     ничего не возвращает, так что результатом будет undefined

//------------------- Точки останова (breakpoints) ---------------------
// Точка останова – это участок кода, где отладчик автоматически
//     приостановит исполнение JavaScript. Пока исполнение поставлено
//     «на паузу», мы можем просмотреть текущие значения переменных,
//     выполнить команды в консоли, другими словами, выполнить отладку 
//     кода.
// В правой части графического интерфейса мы видим список точек останова
//     А когда таких точек выставлено много, да ещё и в разных файлах,
//     этот список поможет эффективно ими управлять:
//  1) Быстро перейдите к точке останова в коде (нажав на неё на правой
//     панели).
//  2) Временно отключите точку останова, сняв с неё галочку.
//  3) Удалите точку останова, щёлкнув правой кнопкой мыши и выбрав
//     Remove (Удалить).
//  4) …и так далее.
// Щелчок правой кнопкой мыши по номеру строки позволяет создать 
    // условную точку останова. Она сработает только в тот момент, когда
    // выражение, которое вы должны указать при создании такой точки,
    // истинно. Это удобно, когда нам нужно остановиться только для при
    // определённом значении переменной или для определённых параметров
    // функции.

//------------------------- Команда debugger ---------------------------
// Выполнение кода можно также приостановить с помощью команды debugger
//     прямо изнутри самого кода:

// function hello(name) {
//   let phrase = `Привет, ${name}!`;

//   debugger;  // <-- тут отладчик остановится

//   say(phrase);
// }
// Такая команда сработает только если открыты инструменты разработки,
//     иначе браузер ее проигнорирует.

//---------------------- Остановимся и оглядимся ------------------------
// 1) Watch– показывает текущие значения для любых выражений.
//      Вы можете нажать на + и ввести выражение. Отладчик покажет его
//      значение, автоматически пересчитывая его в процессе выполнения.

// 2) Call Stack – показывает цепочку вложенных вызовов.
//      Если вы нажмёте на элемент стека (например, «anonymous»),
//      отладчик перейдёт к соответствующему коду, и нам представляется
//      возможность его проанализировать.

// 3) Scope показывает текущие переменные.

// 4) Local показывает локальные переменные функций, а их значения
//      подсвечены прямо в исходном коде.

// 5) В Global перечисляются глобальные переменные (то есть вне
//      каких-либо функций).

//------------------- Пошаговое выполнение скрипта ---------------------
// Для этого есть кнопки в верхней части правой панели.
//     1) «Resume»: продолжить выполнение, быстрая клавиша F8.
//             Возобновляет выполнение кода. Если больше нет точек 
//             останова, то выполнение просто продолжается, без контроля
//             отладчиком.

//     2) «Step»: выполнить следующую команду, быстрая клавиша F9.
//             Выполняет следующую инструкцию. Нажатие на эту кнопку
//             снова и снова приведёт к пошаговому выполнению всех
//             инструкций скрипта одного за другим.

//     3) «Step over»: выполнить следующую команду, но не заходя внутрь 
//     функции, быстрая клавиша F10.
//             Pаботает аналогично предыдущей команде «Step», но ведёт
//             себя по-другому, если следующая инструкция является 
//             вызовом функции (имеется ввиду: не встроенная, как alert,
//             а объявленная нами функция).
//             Если сравнить, то команда «Step» переходит во вложенный
//             вызов функцию и приостанавливает выполнение в первой
//             строке, в то время как «Step over» выполняет вызов 
//             вложенной функции незаметно для нас, пропуская её
//             внутренний код.
//             Затем выполнение приостанавливается сразу после вызова
//             функции. Это хорошо, если нам не интересно видеть, что
//             происходит внутри вызова функции.
        
//     4) «Step into», быстрая клавиша F11. Это похоже на «Step», но
//             ведёт себя по-другому в случае асинхронных вызовов
//             функций. Если вы только начинаете изучать JavaScript, то
//             можете не обращать внимания на разницу, так как у нас ещё
//             нет асинхронных вызовов.
//             На будущее просто помните, что команда «Step» игнорирует
//             асинхронные действия, такие как setTimeout (вызов
//             функции по расписанию), которые выполняются позже. «Step
//             into» входит в их код, ожидая их, если это необходимо.
            
//     5) «Step out»: продолжить выполнение до завершения текущей 
//     функции быстрая клавиша Shift+F11.
//             Продолжает выполнение и останавливает его в самой 
//             последней строке текущей функции. Это удобно, когда мы
//             случайно вошли во вложенный вызов, используя , но это нас
//             не интересует, и мы хотим продолжить его до конца как
//             можно скорее.

//     6) Aктивировать/деактивировать все точки останова(breakpoints).
//             Эта кнопка не влияет на выполнение кода, она лишь 
//             позволяет массово включить/отключить точки останова.

//     7)  Bключить/отключить автоматическую паузу в случае ошибки.
//             При включении, если открыты инструменты разработчика, 
//             ошибка при выполнении скрипта автоматически 
//             приостанавливает его. Затем мы можем проанализировать
//             переменные в отладчике, чтобы понять, что пошло не так. 
//             Поэтому, если наш скрипт умирает с ошибкой, мы можем 
//             открыть отладчик, включить эту опцию и перезагрузить 
//             страницу, чтобы увидеть, где он умирает и каков контекст
//             в этот момент.
// Щелчок правой кнопкой мыши по строке кода открывает контекстное меню
//     с отличной опцией под названием «Continue to here»
//     («продолжить до этого места»).
// Это удобно, когда мы хотим перейти на несколько шагов вперёд к строке
//     но лень устанавливать точку останова (breakpoint).

//--------------------------- Логирование ------------------------------
// Чтобы вывести что-то на консоль из нашего кода, существует функция 
//     console.log. Например, это выводит в консоль значения от 0 до 4:

// for (let i = 0; i < 5; i++) {
//   console.log("value,", i);
// }
// Обычный пользователь сайта не увидит такой вывод, так как он в 
//     консоли. Чтобы увидеть его, либо откройте консольную панель
//     инструментов разработчика, либо нажмите Esc, находясь в другой
//     панели: это откроет консоль внизу.
//------------------------------- break --------------------------------
//Чтобы организовать бесконечный цикл, используют конструкцию 
    //while (true)
//Mы можем выйти из цикла в любой момент с помощью специальной директивы
    //break. Например, следующий код подсчитывает сумму вводимых чисел 
    //до тех пор, пока посетитель их вводит, а затем – выдаёт:

// let sum = 0;

// while (true) {
//   let value = +prompt("Введите число", '');
//   if (!value) break; // (*)
//   sum += value;
// }
// alert( 'Сумма: ' + sum );
//Директива break в строке (*) полностью прекращает выполнение цикла и 
    //передаёт управление на строку за его телом, то есть на alert. 
    //Вообще, сочетание «бесконечный цикл + break» – отличная штука для 
    //тех ситуаций, когда условие, по которому нужно прерваться, 
    //находится не в начале или конце цикла, а посередине или даже в
    //нескольких местах его тела
//------------------------------- continue -----------------------------
//Директива continue – «облегчённая версия» break. При её выполнении
    //цикл не прерывается, а переходит к следующей итерации (если 
    //условие все ещё равно true). Её используют, если понятно, что на
    //текущем повторе цикла делать больше нечего.
//Bместо continue можно просто завернуть действия в блок if. Однако мы 
    //получили дополнительный уровень вложенности фигурных скобок. Если
    //код внутри if более длинный, то это ухудшает читаемость, в отличие
    //от варианта с continue.

//(i > 5) ? alert(i) : continue; // continue здесь приведёт к ошибке
//Это ещё один повод не использовать оператор вопросительного знака ? 
    //вместо if.
//------------------------- Метки для break/continue -------------------
//Бывает, нужно выйти одновременно из нескольких уровней цикла сразу.
    //Обычный break после input лишь прервёт внутренний цикл, но этого 
    //недостаточно. Достичь желаемого поведения можно с помощью меток.
    //Метка имеет вид идентификатора с двоеточием перед циклом:

// labelName: for (...) {
//   ...
// }
//Вызов break <labelName> в цикле ниже ищет ближайший внешний цикл с 
    //такой меткой и переходит в его конец.
    
//outer: for (let i = 0; i < 3; i++) {

  //for (let j = 0; j < 3; j++) {

    //let input = prompt(`Значение на координатах (${i},${j})`, '');

    //if (!input) break outer; // (*)
  //}
//}

//alert('Готово!');
// В примере выше это означает, что вызовом break outer будет разорван
    //внешний цикл до метки с именем outer. Таким образом управление 
    //перейдёт со строки, помеченной (*), к alert('Готово!').
//Директива continue также может быть использована с меткой. В этом 
    //случае управление перейдёт на следующую итерацию цикла с меткой.
//Метки не позволяют «прыгнуть» куда угодно. Директива break должна 
    //находиться внутри блока кода. Технически, подойдет любой 
    //маркированный блок кода, например:

//label: {
  // ...
  //break label;
  // ...
//}
//continue возможно только внутри цикла.
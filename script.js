// Пример объявления функции:

// function showMessage() {
//   alert( 'Всем привет!' );
// }
// Вначале идёт ключевое слово function, после него имя функции, затем 
    // список параметров в круглых скобках через запятую (в  
    // вышеприведённом примере он пустой) и, наконец, код функции, также
    // называемый «телом функции», внутри фигурных скобок.
// Переменные, объявленные внутри функции, видны только внутри этой 
    // функции.
// У функции есть доступ к внешним переменным. У функции есть доступ к 
    // внешним переменным Внешняя переменная используется, только если 
    // внутри функции нет такой локальной. Если одноимённая переменная 
    // объявляется внутри функции, тогда она перекрывает внешнюю.
// Переменные, объявленные снаружи всех функций – называются глобальными
//--------------------------- Параметры --------------------------------
// Когда функция вызывается в строках (*) и (**), переданные значения 
//     копируются в локальные переменные from и text. Затем они 
//     используются в теле функции. Вот ещё один пример: 
//     у нас есть переменная from, и мы передаём её функции. 
//     Обратите внимание:функция изменяет значение from,но это изменение
//     не видно снаружи. Функция всегда получает только копию значения:

// function showMessage(from, text) {
//   from = '*' + from + '*'; // немного украсим "from"
//   alert( from + ': ' + text );
// }

// let from = "Аня";

// showMessage(from, "Привет"); // *Аня*: Привет

// значение "from" осталось прежним, функция изменила значение локальной
//     переменной
// alert( from ); // Аня
// Значение передаваемое в качестве параметра функции, также называется
//     аргументом. Другими словами:
//     Параметр – это переменная, указанная в круглых скобках в 
//     объявлении функции. Аргумент – это значение, которое передаётся
//     функции при её вызове.
// Если параметр не указан, то его значением становится undefined.
//     Например, вышеупомянутая функция showMessage(from, text)  
//     может быть вызвана с одним аргументом:

// showMessage("Аня");

// Это не приведёт к ошибке. Такой вызов выведет "*Аня*: undefined". В 
//     вызове не указан параметр text, поэтому предполагается, что 
//     text === undefined. Если мы хотим задать параметру text значение
//     по умолчанию, мы должны указать его после = :

// function showMessage(from, text = "текст не добавлен") {
//   alert( from + ": " + text );
// }

// showMessage("Аня"); // Аня: текст не добавлен
// Теперь, если параметр text не указан, его значением будет 
//     "текст не добавлен". В данном случае "текст не добавлен" - это
//     строка, но на её месте могло бы быть и более сложное выражение,
//     которое бы вычислялось и присваивалось при отсутствии параметра.
//     Например:

// function showMessage(from, text = anotherFunction()) {
//   // anotherFunction() выполнится только если не передан text
//   // результатом будет значение text
// }
//------------------------- Возврат значения ---------------------------
// Функция может вернуть результат, который будет передан в вызвавший 
    //её код.
// Директива return может находиться в любом месте тела функции. Как 
//     только выполнение доходит до этого места, функция останавливается
//     и значение возвращается в вызвавший её код (присваивается 
//     переменной result выше).
// Вызовов return может быть несколько, например:

// function checkAge(age) {
//     if (age > 18) {
//       return true;
//     } else {
//       return confirm('А родители разрешили?');
//     }
//   }
  
// let age = prompt('Сколько вам лет?', 18);
  
// if ( checkAge(age) ) {
//   alert( 'Доступ получен' );
// } else {
//   alert( 'Доступ закрыт' );
// }

// Если функция не возвращает значения, это всё равно, как если бы она
//     возвращала undefined
// Для длинного выражения в return может быть заманчиво разместить его
//     на нескольких отдельных строках, например так:

// return
//  (some + long + expression + or + whatever * f(a) + f(b));

// Код не выполнится, потому что интерпретатор JavaScript подставит
//     точку с запятой после return
// Таким образом, это фактически стало пустым return.
// Если мы хотим, чтобы возвращаемое выражение занимало несколько строк,
//     нужно начать его на той же строке, что и return. Или, хотя бы, 
//     поставить там открывающую скобку, вот так:

// return (
//   some + long + expression
//   + or +
//   whatever * f(a) + f(b)
//   )

// И тогда всё сработает, как задумано.
//-------------------------- Функции == Комментарии ------------------
// Функции должны быть короткими и делать только что-то одно. Если это
//     что-то большое, имеет смысл разбить функцию на несколько 
//     меньших. Небольшие функции не только облегчают тестирование и 
//     отладку – само существование таких функций выполняет роль 
//     хороших комментариев! Таким образом, допустимо создавать функции,
//     даже если мы не планируем повторно использовать их. Такие 
//     функции структурируют код и делают его более понятным.